@startuml Logic Components

!theme mars

skinparam handwritten false
skinparam shadowing false
skinparam backgroundColor #FFFFF0

package Backend {
    package Database <<Database>> #LightYellow {
        class DatabaseHandler {
            - initDatabases
            + writeUser(User)
            + deleteUser(User.name)
            + updateUser(User)
            + userFinancialProfile(User)
            --Getters--
            + getUser: string
            + getUserMetadata: map[string, string]
            --Setters--
            + setName: void
            + setEmail: void
            + setPassword: void
        }

        struct User {
            + id: int
            + name: string
            + password: string
            + email: string
            + createdAt: Date
        }
    }

    package Functions {
        enum Categories {
            + CURRENT_ACCOUNT: string
            + SAVINGS_ACCOUNT: string
            + TERM_DEPOSIT: string
            + MONEY_MARKET: string
            + CREDIT_CARD: string
            + PERSONAL_LOANS: string
            + PERSONAL_INVESTMENTS: string
            + MORTGAGE: string
            + HIRE_PURCHASE: string
            + INSURANCE: string
            + MICRO_LOANS: string
            + OTHER: string
        }

        struct AccountOverview {
            + id: int
            + current_account: number
            + saving_account: number
            + term_deposit: string
            + money_market: string
            + credit_card: CreditCard
            + personal_loans: list[PersonalLoans]
            + income: Income
        }

        enum IncomeType {
            + ACTIVE
            + PASSIVE
        }

        struct Income {
            + id: number
            + incom_type: IncomeType
        }

        struct PersonalLoans {
            + id: int
            + name: string
            + loan_amount: float
            + interest: float
        }

        struct CreditCard {
            + id: int
            + credit_card_count: int
            + totalt_card_credit_limit: float
        }

        enum FinancialStatus {
            + HEALTHY
            + MANAGEABLE
            + RISKY
            + CLOSE_TO_BANKRUPTCY
            + BANKRUPT 
        }

        class FinancialAnalysis {
            + setAccount(Categories, User): void
            + getAccountOverview(User): AccountOverview
            - calculateDebtServiceRatio(MonthLyDebtsPayment, MonthlyIncome): string 
            - calculateWarAccumulationRatio(TotalAssets, TotalLiabilities): string
            - calculateCurrentCashflow(TotalInflow - TotalOutflow): string
            - calculateCurrentNetWorth(TotalAssets - TotalLiabilities): string
            - calculatePersistency(Cashflow + Networth / Total Debt): string
        }
    }

    ' note bottom of calculateDebtServiceRatio
    '     Debt Service Ratio (DSR):
    '     This method calculates the Debt Service Ratio based on monthly debt payments and income.
    '     It returns a string representing the DSR value.

    '     Summary of DSR Interpretations:
    '     - <&lt; 30% &gt;: Healthy, low risk, strong financial position (Good)
    '     - <&lt; 30% - 40% &gt;: Manageable, generally acceptable (Neutral/Acceptable)
    '     - <&lt; > 40% &gt;: Higher debt load, increased financial strain (Risky/Bad)
    '     - <&lt; > 50% &gt;: Financially overburdened, high risk (Very Bad)
    ' end note

    User --o DatabaseHandler :model
    Categories --* FinancialAnalysis

    AccountOverview --* FinancialAnalysis :aggregation
    CreditCard --* AccountOverview :aggregation
    PersonalLoans --* AccountOverview :aggregation
    IncomeType --* Income: aggregation
    Income --* AccountOverview :aggregation
    FinancialStatus --* FinancialAnalysis :aggregation

}

package Frontend {
    class Authentication {
        # initAuthenticationServices: void
        + register(User): bool
        + requestAccountDeletion: void
        --Getters--
        + getName: string
        + getEmail: string
        --Setters--
        + setName: void
        + setEmail: void
        + setPassword: void
    }

    class Utilities {
        + saveLocalStorage(): void
        + clearStorage() : void
    }

    struct User {
        + id: int
        + name: string
        + password: string 
        + email: string
    }

    User o-- Authentication
}

@enduml