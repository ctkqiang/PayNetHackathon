import 'package:flutter/material.dart';

class SetupPage extends StatefulWidget {
  final String? name;
  const SetupPage({super.key, this.name});

  @override
  State<SetupPage> createState() => _SetupPageState();
}

class _SetupPageState extends State<SetupPage>
    with SingleTickerProviderStateMixin {
  // Map of options to their explanations
  final Map<String, String> options = {
    'Expenses':
        'Expenses are the costs incurred by the business for operations.',
    'Income':
        'Income refers to the total revenue generated by your activities.',
    'Debts': 'Debts are the financial obligations you owe to others.',
    'Cashflow':
        'Cashflow is the movement of money in and out of your business.',
    'Net Worth':
        'Net worth is the difference between total assets and total liabilities.',
    'Persistency Ratio':
        'The persistency ratio measures the renewal rate of policies.',
    'Wealth Accumulation Ratio':
        'This ratio indicates the proportion of wealth accumulation over time.',
    'Emergency Funds':
        'Emergency funds are savings for unexpected financial emergencies.',
    'Insurances': 'Insurance refers to coverage against financial losses.',
    'Investments':
        'Investments are assets bought with the expectation of earning a return.'
  };

  // List to store whether each option is selected or not
  List<bool> _selectedOptions = [];
  AnimationController? _animationController;
  List<Animation<double>> _fadeAnimations = [];
  List<Animation<Offset>> _slideAnimations = [];

  @override
  void initState() {
    super.initState();

    // Initialize selected options
    _selectedOptions = List.generate(options.length, (index) => false);

    // Initialize animation controller
    _animationController = AnimationController(
      duration: const Duration(milliseconds: 1500),
      vsync: this,
    );

    final double intervalStep = 1.0 / options.length;

    // Create individual animations for each item
    _fadeAnimations = List.generate(
      options.length,
      (index) => Tween<double>(
        begin: 0.0,
        end: 1.0,
      ).animate(
        CurvedAnimation(
          parent: _animationController!,
          curve: Interval(
            index * intervalStep,
            (index * intervalStep) + intervalStep,
            curve: Curves.easeOut,
          ),
        ),
      ),
    );

    _slideAnimations = List.generate(
      options.length,
      (index) => Tween<Offset>(
        begin: const Offset(0.3, 1),
        end: Offset.zero,
      ).animate(
        CurvedAnimation(
          parent: _animationController!,
          curve: Interval(
            index * intervalStep,
            (index * intervalStep) + intervalStep,
            curve: Curves.easeOut,
          ),
        ),
      ),
    );

    _animationController!.forward();
  }

  @override
  void dispose() {
    _animationController?.dispose();
    super.dispose();
  }

  Future<void> setUserPreferences(List<String> choices) async {}

  @override
  Widget build(BuildContext context) {
    if (_animationController == null) {
      return const Center(child: CircularProgressIndicator());
    }

    return Scaffold(
      appBar: AppBar(
        title: const Text('Setup Page'),
        actions: [
          IconButton(
            icon: Icon(
              Icons.arrow_circle_right_outlined,
              color: Theme.of(context).iconTheme.color!.withOpacity(0.7),
              size: 35,
            ),
            onPressed: () {},
          )
        ],
        forceMaterialTransparency: true,
        bottomOpacity: 0.0,
      ),
      body: RefreshIndicator(
        onRefresh: () async => _animationController!.forward(),
        child: ListView.builder(
          itemCount: options.length,
          padding: const EdgeInsets.only(top: 8, bottom: 8),
          itemBuilder: (context, index) {
            String optionKey =
                options.keys.elementAt(index); // Get the option key
            String explanation =
                options[optionKey]!; // Get the corresponding explanation

            return AnimatedBuilder(
              animation: _animationController!,
              builder: (context, child) {
                return Opacity(
                  opacity: _fadeAnimations[index].value,
                  child: SlideTransition(
                    position: _slideAnimations[index],
                    child: Padding(
                      padding: const EdgeInsets.symmetric(
                        vertical: 4.0,
                        horizontal: 16.0,
                      ),
                      child: Card(
                        elevation: 2,
                        child: ListTile(
                          leading: Checkbox(
                            value: _selectedOptions[index],
                            onChanged: (bool? value) => setState(
                                () => _selectedOptions[index] = value ?? false),
                          ),
                          title: Text(
                            optionKey,
                            style: const TextStyle(fontSize: 16),
                          ),
                          subtitle:
                              Text(explanation), // Display the explanation
                          contentPadding:
                              const EdgeInsets.symmetric(horizontal: 16),
                        ),
                      ),
                    ),
                  ),
                );
              },
            );
          },
        ),
      ),
    );
  }
}
